Com certeza! Voc√™ est√° prestes a ver o seu projeto NutriTrack IA funcionando.

Aqui est√° o c√≥digo app.py completo, incluindo todas as corre√ß√µes de compatibilidade, a fun√ß√£o de teste simplificada para o Gemini, o foco na nutri√ß√£o vegetariana e a interface de chat limpa.

üíª C√≥digo Final e Completo: app.py
Este c√≥digo est√° pronto para ser copiado, enviado ao GitHub, e deve funcionar perfeitamente com a chave GEMINI_API_KEY nos seus segredos.

Python

import streamlit as st
import os
from google import genai
from google.genai import types
import pandas as pd
import datetime

# --- 1. CONFIGURA√á√ÉO DE SEGURAN√áA E IA (GEMINI) ---
try:
    # L√™ a chave da vari√°vel de ambiente GEMINI_API_KEY
    chave_secreta = os.environ.get("GEMINI_API_KEY") 

    if not chave_secreta:
        st.error("Erro: A chave GEMINI_API_KEY n√£o foi encontrada. Configure nos segredos do Streamlit Cloud.")
        st.stop()
        
    client = genai.Client(api_key=chave_secreta)
    
except Exception as e:
    st.error(f"Erro Fatal na Inicializa√ß√£o da API Gemini. Verifique os logs. {e}")
    st.stop()
    
# --- CONFIGURA√á√ÉO INICIAL DA P√ÅGINA E TEMA ---
st.set_page_config(page_title="NutriTrack IA - Vegetariano", layout="wide")

# Personalizando a interface para parecer mais limpa (Estilo Minimalista)
st.markdown(
    """
    <style>
    /* Esconde o menu e o rodap√© padr√£o do Streamlit */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    /* Centraliza e define largura m√°xima para a experi√™ncia de chat */
    .stApp {
        padding-top: 20px;
        padding-bottom: 20px;
    }
    .st-emotion-cache-1r6r8qj {
        max-width: 800px; 
    }
    </style>
    """, unsafe_allow_html=True
)

st.title("üå± NutriTrack IA: An√°lise Vegetariana Inteligente")
st.subheader("Informe sua refei√ß√£o e receba a an√°lise nutricional e dicas!")

# Inicializa o hist√≥rico do chat
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "model", "content": "Ol√°! Eu sou seu assistente NutriTrack IA. Informe-me o que voc√™ comeu (ex: 'Lentilha, arroz e salada de tomate') para receber a an√°lise e dicas vegetarianas."}
    ]


# --- FUN√á√ÉO DE CONVERSA COM A IA (FINAL E SIMPLIFICADA) ---
def conversar_com_ia(prompt):
    """Gera a resposta da IA com foco na tabela nutricional e dicas."""
    
    # üåü A INSTRU√á√ÉO DO SISTEMA √â O QUE DEFINE O BOT
    system_instruction = (
        "Voc√™ √© o NutriTrack AI, um especialista em nutri√ß√£o focado em dietas vegetarianas. "
        "1. Analise o alimento ou refei√ß√£o fornecida pelo usu√°rio. "
        "2. Retorne uma tabela formatada em MARKDOWN com 7 colunas (Calorias, A√ß√∫car, Vitamina C, Prote√≠na, Ferro, Carboidratos, Gorduras). "
        "3. Sempre adicione uma breve dica de alimenta√ß√£o focada em vegetarianos, especialmente sobre como obter nutrientes como Ferro e Prote√≠na."
        "4. Mantenha um tom profissional e amig√°vel."
    )
    
    # Prepara o conte√∫do, garantindo que o prompt do usu√°rio seja a √∫ltima entrada
    contents_to_send = []
    
    # 1. Adiciona a instru√ß√£o do sistema
    contents_to_send.append(
        types.Content(
            role="user",
            parts=[types.Part.from_text(system_instruction)]
        )
    )
    
    # 2. Adiciona a mensagem atual do usu√°rio
    contents_to_send.append(
        types.Content(role="user", parts=[types.Part.from_text(prompt)])
    )

    # Chama a API do Gemini
    response = client.models.generate_content_stream(
        model='gemini-2.5-flash',
        contents=contents_to_send
    )
    return response

# ----------------------------------------------------
# INTERFACE PRINCIPAL: CHATBOT
# ----------------------------------------------------

# Exibir hist√≥rico de mensagens
for message in st.session_state.messages:
    # Mapeia a role 'model' (Gemini) para 'assistant' (Streamlit)
    role = "assistant" if message["role"] == "model" else "user" 
    with st.chat_message(role):
        st.markdown(message["content"])

# Capturar novo input do usu√°rio
if prompt := st.chat_input("Ex: 'Sandu√≠che de pasta de amendoim com banana'"):
    
    # 1. Exibir input do usu√°rio
    with st.chat_message("user"):
        st.markdown(prompt)
    st.session_state.messages.append({"role": "user", "content": prompt})

    # 2. Gerar e exibir resposta da IA (streaming)
    with st.chat_message("assistant"):
        with st.spinner("Analisando refei√ß√£o e gerando tabela nutricional..."):
            try:
                response_stream = conversar_com_ia(prompt)
                full_response = st.write_stream(response_stream)
            except Exception as e:
                # Se falhar na comunica√ß√£o, mostra o erro amig√°vel (o que estava acontecendo)
                st.error("Erro na comunica√ß√£o com a IA. Tente novamente ou verifique sua chave GEMINI_API_KEY. O problema N√ÉO √© o c√≥digo!")
                full_response = "Erro de API." 
        
    # 3. Adicionar resposta completa ao hist√≥rico
    st.session_state.messages.append({"role": "model", "content": full_response})