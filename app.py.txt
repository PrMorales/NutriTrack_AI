import streamlit as st
from openai import OpenAI
import os

# --- 1. Configura√ß√£o de Seguran√ßa e Inicializa√ß√£o da IA ---
try:
    # O st.secrets busca o valor que voc√™ vai configurar na plataforma de deploy
    chave_secreta = st.secrets["external_api"]["openai_api_key"]
    client = OpenAI(api_key=chave_secreta)
except Exception as e:
    st.error("Erro na configura√ß√£o: A chave de API n√£o foi encontrada. Configure 'external_api.openai_api_key' nos segredos do Streamlit Cloud.")
    st.stop() # Para o aplicativo se n√£o tiver a chave de seguran√ßa


# 2. Configura√ß√£o da P√°gina e T√≠tulo
st.set_page_config(page_title="NutriTrack IA", layout="wide")
st.title("ü•ë NutriTrack IA: Seu Assistente Nutricional Inteligente")
st.subheader("Pergunte ao nosso especialista em nutri√ß√£o!")

# 3. Inicializar Hist√≥rico da Conversa
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "assistant", "content": "Ol√°! Eu sou o NutriTrack AI. Posso te ajudar com d√∫vidas sobre calorias, dietas, e sugest√µes de alimenta√ß√£o. Como posso te ajudar hoje?"}
    ]

# 4. A Fun√ß√£o Principal de Conversa√ß√£o com a IA
def conversar_com_ia(prompt):
    
    # Define a 'personalidade' da IA (System Prompt)
    system_prompt = (
        "Voc√™ √© o NutriTrack AI, um assistente nutricional experiente e amig√°vel. "
        "Suas respostas devem ser focadas em nutri√ß√£o, dietas saud√°veis, c√°lculo de calorias, "
        "e sugest√µes de receitas. Mantenha um tom profissional e de apoio. "
        "NUNCA forne√ßa aconselhamento m√©dico ou substitua um profissional de sa√∫de."
    )
    
    messages_to_send = [
        {"role": "system", "content": system_prompt}
    ]
    
    # Adiciona o hist√≥rico da conversa
    for message in st.session_state.messages:
        if message["role"] in ["user", "assistant"]:
            messages_to_send.append({"role": message["role"], "content": message["content"]})
            
    messages_to_send.append({"role": "user", "content": prompt})

    # Chama a API
    response = client.chat.completions.create(
        model="gpt-3.5-turbo", 
        messages=messages_to_send,
        stream=True
    )
    
    return response

# 5. Loop de Exibi√ß√£o e Intera√ß√£o
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

if prompt := st.chat_input("O que voc√™ gostaria de saber?"):
    
    with st.chat_message("user"):
        st.markdown(prompt)
    st.session_state.messages.append({"role": "user", "content": prompt})

    with st.chat_message("assistant"):
        with st.spinner("Pensando..."):
            response_stream = conversar_com_ia(prompt)
            full_response = st.write_stream(response_stream)
            
    st.session_state.messages.append({"role": "assistant", "content": full_response})